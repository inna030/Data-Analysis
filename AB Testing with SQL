--Use the order_binary metric, count the number of users
--per treatment group for test_id = 7, and count the number of users with orders
--(for test_id 7)

SELECT
   test_assignment,
   COUNT (user_id) as users,
   SUM (order_binary) as users_with_orders
FROM
(
SELECT
assignments.user_id,
assignments.test_id,
assignments.test_assignment,
MAX (CASE when orders.created_at > assignments.event_time
then 1 else 0 END) as order_binary
FROM
(
SELECT
event_id,
event_time,
user_id,
-- platform,
MAX (CASE when parameter_name = 'test_id'
then cast (parameter_value as int)
else NULL END) as test_id,
MAX (CASE when parameter_name = 'test_assignment'
then cast (parameter_value as int)
else NULL END) as test_assignment
FROM
dsv1069.events
WHERE
Event_name = 'test_assignment'
GROUP BY
event_id,
event_time,
user_id
ORDER BY
event_id
) assignments
LEFT OUTER JOIN
dsv1069.orders
on assignments.user_id = orders.user_id
GROUP BY
assignments.user_id,
assignments.test_id,
assignments.test_assignment
) user_level
WHERE test_id = 7
GROUP BY
test_assignment


--Create a new item view binary metric.
--Count the number of users per treatment
--group, and count the number of users with views (for test_id 7)
SELECT
   test_assignment,
   COUNT (user_id) as users,
   SUM (order_binary) as users_with_views
FROM
(
SELECT
assignments.user_id,
assignments.test_id,
assignments.test_assignment,
MAX (CASE when events.event_time > assignments.event_time
then 1 else 0 END) as order_binary
FROM
(
SELECT
event_id,
event_time,
user_id,
-- platform,
MAX (CASE when parameter_name = 'test_id'
then cast (parameter_value as int)
else NULL END) as test_id,
MAX (CASE when parameter_name = 'test_assignment'
then cast (parameter_value as int)
else NULL END) as test_assignment
FROM
dsv1069.events
WHERE
Event_name = 'test_assignment'
GROUP BY
event_id,
event_time,
user_id
ORDER BY
event_id
) assignments
LEFT OUTER JOIN
dsv1069.events
on assignments.user_id = events.user_id
GROUP BY
assignments.user_id,
assignments.test_id,
assignments.test_assignment
) user_level
WHERE test_id = 7
GROUP BY
test_assignment

-- compute the users who viewed an item WITHIN 30
--days of their treatment event
SELECT
   test_assignment,
   COUNT (user_id) as users,
   SUM (order_binary) as users_with_views_in_30days
FROM
(
SELECT
assignments.user_id,
assignments.test_id,
assignments.test_assignment,
MAX (CASE when events.event_time > assignments.event_time
And
cast((date(events.event_time) - date(assignments.event_time)) as int) <= 30
then 1 else 0 END) as order_binary
FROM
(
SELECT
event_id,
event_time,
user_id,
-- platform,
MAX (CASE when parameter_name = 'test_id'
then cast (parameter_value as int)
else NULL END) as test_id,
MAX (CASE when parameter_name = 'test_assignment'
then cast (parameter_value as int)
else NULL END) as test_assignment
FROM
dsv1069.events
WHERE
Event_name = 'test_assignment'
GROUP BY
event_id,
event_time,
user_id
ORDER BY
event_id
) assignments
LEFT OUTER JOIN
dsv1069.events
on assignments.user_id = events.user_id
GROUP BY
assignments.user_id,
assignments.test_id,
assignments.test_assignment
) user_level
WHERE test_id = 7
GROUP BY
test_assignment

--Create the metric invoices (this is a mean
--metric, not a binary metric) and for test_id = 7
  ----The count of users per treatment group
  ----The average value of the metric per treatment group
  ----The standard deviation of the metric per treatment group
  SELECT test_id,

       test_assignment,

       COUNT(user_id) AS users,

       AVG(invoices) AS avg_invoices,

       STDDEV(invoices) AS stddev_invoices

FROM

  (SELECT assignments.user_id,

          assignments.test_id,

          assignments.test_assignment,

          COUNT(DISTINCT CASE

                             WHEN orders.created_at > assignments.event_time THEN orders.invoice_id

                             ELSE NULL

                         END) AS invoices,

          COUNT(DISTINCT CASE

                             WHEN orders.created_at > assignments.event_time THEN orders.line_item_id

                             ELSE NULL

                         END) AS line_items,

          COALESCE(SUM(CASE

                           WHEN orders.created_at > assignments.event_time THEN orders.price

                           ELSE 0

                       END), 0) AS total_revenue

   FROM

     (SELECT event_id,

             event_time,

             user_id,

             MAX(CASE

                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)

                     ELSE NULL

                 END) AS test_id,

             MAX(CASE

                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)

                     ELSE NULL

                 END) AS test_assignment

      FROM dsv1069.events

      GROUP BY event_id,

               event_time,

               user_id

      ORDER BY event_id) assignments

   LEFT OUTER JOIN dsv1069.orders

     ON assignments.user_id = orders.user_id

   GROUP BY assignments.user_id,

            assignments.test_id,

            assignments.test_assignment) mean_metrics

GROUP BY test_id,

         test_assignment

ORDER BY test_id;
